{
	"admin": {
		"bulk_table_view_tag_importer.py": {
			"description": "\n\nAdds tag to set of tables or views",
			"arguments": {
				"profile": {
					"default": "default",
					"required": false,
					"help": "Specify an MCD profile name. Uses default otherwise."
				},
				"input_file": {
					"required": true,
					"help": "Path to CSV file containing asset names. The file may contain 1 or 2 columns: \nThe first column can either contain the full asset name(db:schema.table) or the MCON value and the second(optional) will be the key:value of the tag"
				},
				"warehouse": {
					"required": false,
					"help": "Warehouse name as it appears in MC"
				},
				"asset_type": {
					"required": false,
					"help": "view, table, or external",
					"choices": ["table", "view", "external"]
				},
				"tag": {
					"required": false,
					"help": "Tag in key:value format"
				}
			}
		}
	},
	"monitors": {
		"add_remove_monitoring_rules.py": {
			"description": "\nAdds or removes tables as individual monitoring rules. \nNote: 100 monitoring rules is the limit",
			"arguments": {
				"profile": {
					"default": "default",
					"required": false,
					"help": "Specify an MCD profile name. Uses default otherwise."
				},
				"input": {
					"required": true,
					"help": "Path to the txt file containing list of full table ids."
				},
				"warehouse": {
					"required": true,
					"help": "Warehouse ID"
				},
				"operation": {
					"required": true,
					"help": "Enable/Disable tables under usage.",
					"choices": ["enable", "disable"]
				}
			}
		},
		"enable_monitored_table_volume_queries.py": {
			"description": "\nAdds all tables that are monitored to row count monitoring",
			"arguments": {
				"profile": {
					"default": "default",
					"required": false,
					"help": "Specify an MCD profile name. Uses default otherwise."
				},
				"operation": {
					"required": true,
					"choices": ["enable", "disable"],
					"default": "enable",
					"help": "Enable/Disable tables under usage."
				}
			}
		},
		"monitor_migration_util.py": {
			"description": "\nExport monitors from UI to MaC.\n\n1. Run the utility in 'export' mode to generate MaC configuration.\n\n2. Modify the 'monitors.yml' generated in step 1 to incorporate monitor changes.\n\n3. Run the utility in 'migrate' mode (monitors will not be commited).\n\n   • Set -f flag to create the monitors.\n\n4. Once confirmed migrated monitors are working as expected, you may disable the original monitors by running the utility in 'disable' mode.\n\n   • Alternatively, you can delete the original monitors by running the utility in 'cleanup' mode.",
			"subparsers": {
				"export":  {
					"description": "Export monitors from MC UI that match asset search pattern.",
					"help":  "Export monitors from MC UI that match asset search pattern.",
					"arguments": {
						"profile":  {
							"default": "default",
							"required": false,
							"help": "Specify an MCD profile name. Uses default otherwise."
						},
						"warehouse": {
							"required": true,
							"help": "Warehouse UUID"
						},
						"asset": {
							"required": true,
							"help": "Asset Name. This can be a project, dataset or table. If UI contains database include it i.e. <database>:<schema>."
						},
						"namespace": {
							"required": false,
							"help": "Namespace for the exported monitors. Defaults to --asset if not set."
						}
					}
				},
				"migrate":  {
					"description": "Creates monitors as MaC after export.",
					"help":  "Creates monitors as MaC after export.",
					"arguments": {
						"profile":  {
							"default": "default",
							"required": false,
							"help": "Specify an MCD profile name. Uses default otherwise."
						},
						"namespace": {
							"required": false,
							"help": "Namespace for the migrated monitors."
						},
						"directory": {
							"required": true,
							"help": "Project directory where output files from 'export' action were generated."
						},
						"force": {
							"required": false,
							"help": "Run WITHOUT dry-run mode.",
							"choices": ["yes", "no"]
						}
					}
				},
				"cleanup":  {
					"description": "Removes old monitors.",
					"help":  "Removes old monitors.",
					"arguments": {
						"profile":  {
							"default": "default",
							"required": false,
							"help": "Specify an MCD profile name. Uses default otherwise."
						},
						"directory": {
							"required": true,
							"help": "Project directory where output files from 'export' action were generated."
						}
					}
				},
				"disable":  {
					"description": "Disables old monitors.",
					"help":  "Disables old monitors.",
					"arguments": {
						"profile":  {
							"default": "default",
							"required": false,
							"help": "Specify an MCD profile name. Uses default otherwise."
						},
						"directory": {
							"required": true,
							"help": "Project directory where output files from 'export' action were generated."
						}
					}
				}
			}
		},
		"monitor_promotion_util.py": {
			"description": "\nUI Monitor Promotion Util.\n\n1. Run the utility in 'export' mode to generate MaC configuration and merge it to the master monitors.yml.\n\n2. Run the utility in 'promote' mode (monitors will not be commited).\n\n   • Set -f flag to create the monitors.\n\n3. Run the utility in 'cleanup' mode to remove the UI monitors that were migrated to MaC",
			"subparsers": {
				"export":  {
					"description": "Export monitors from MC UI that are ready for promotion (where tag = 'ready_for_promotion').",
					"help":  "Export monitors from MC UI that match asset search pattern.",
					"arguments": {
						"profile":  {
							"default": "default",
							"required": false,
							"help": "Specify an MCD profile name. Uses default otherwise."
						},
						"namespace": {
							"required": true,
							"help": "Namespace for the exported monitors"
						},
						"directory": {
							"required": true,
							"help": "Project directory where master monitors.yml resides"
						}
					}
				},
				"promote":  {
					"description": "Creates monitors as MaC after export.",
					"help":  "Creates monitors as MaC after export.",
					"arguments": {
						"profile":  {
							"default": "default",
							"required": false,
							"help": "Specify an MCD profile name. Uses default otherwise."
						},
						"directory": {
							"required": true,
							"help": "Project directory where master monitors.yml resides"
						},
						"force": {
							"required": false,
							"help": "Run WITHOUT dry-run mode.",
							"choices": ["yes", "no"]
						}
					}
				},
				"cleanup":  {
					"description": "Removes old monitors.",
					"help":  "Removes old monitors.",
					"arguments": {
						"profile":  {
							"default": "default",
							"required": false,
							"help": "Specify an MCD profile name. Uses default otherwise."
						},
						"directory": {
							"required": true,
							"help": "Project directory where output files from 'export' action were generated."
						}
					}
				}
			}
		},
		"generate_monitors_yaml_from_csv.py": {
			"description": "\nGenerates monitor configuration as yaml file(MaC) from an input CSV file that contains rules. YML file will be written, which can then be used when syncing Monitors-as-Code.",
			"arguments": {
				"input_csv": {
					"required": true,
					"help": "Path to CSV file containing all migration rules"
				},
				"output_dir": {
					"required": true,
					"help": "Directory where MaC files will get generated"
				}
			}
		},
		"bulk_export_monitors.py": {
			"description": "\nExports monitor configuration as yaml file(MaC). YML file will be written, which can then be used when syncing Monitors-as-Code.\n\n* Monitor 'name' is now a mandatory parameter to apply MaC.\n\n* Set -e flag to 'y' to get monitor names included in the yaml export.",
			"arguments": {
				"profile": {
					"default": "default",
					"required": false,
					"help": "Specify an MCD profile name. Uses default otherwise."
				},
				"export_name": {
					"required": false,
					"default": "n",
					"help": "Include the resource name in the export?",
					"choices": ["y", "n"]
				}
			}
		},
		"deduplicate_metric_monitors.py": {
			"description": "\nFinds and removes duplicate metric monitors from an input YML file.",
			"arguments": {
				"profile": {
					"default": "default",
					"required": false,
					"help": "Specify an MCD profile name. Uses default otherwise."
				},
				"namespace": {
					"required": false,
					"help": "Namespace of monitors configuration."
				},
				"input": {
					"required": true,
					"help": "Input file path."
				}
			}
		},
		"delete_monitors_by_audience.py": {
			"description": "\nDelete all monitors within a given audience.",
			"arguments": {
				"profile": {
					"default": "default",
					"required": false,
					"help": "Specify an MCD profile name. Uses default otherwise."
				},
				"audience": {
					"required": true,
					"help": "Audience for which to delete all monitors. If multiple Audiences, pass all in comma separated list"
				}
			}
		},
		"bulk_set_freshness_sensitivity.py": {
			"description": "\nUpdates freshness OOTB monitor sensitivity. \n\n* If updating to an explicit threshold, create a CSV with 3 columns: [full_table_id,cron,updated_in_last_minutes]\n* If updating to an automatic threshold, create a CSV with 2 columns: [full_table_id,sensitivity].\n\nSensitivity must be one of LOW, MEDIUM or HIGH.",
			"arguments": {
				"profile": {
					"default": "default",
					"required": false,
					"help": "Specify an MCD profile name. Uses default otherwise."
				},
				"input_file": {
					"required": true,
					"help": "Relative or absolute path to csv file containing freshness monitor configuration."
				},
				"warehouse": {
					"required": true,
					"help": "Warehouse ID."
				}
			}
		},
		"bulk_update_comparison_monitor_dynamic_schedule.py": {
			"description": "\nUpdates legacy comparison monitors dynamic schedules in bulk. \n\n* CSV must contain 2 columns: [monitor_id, asset]\n* monitor_id refers to the monitor uuid available in the monitor page URL. It can also be obtained by downloading the Monitors Data Export from the UI: https://getmontecarlo.com/monitors\n* The asset column refers to the full table id that will be tied to the dynamic schedule i.e. database:schema.table",
			"arguments": {
				"profile": {
					"default": "default",
					"required": false,
					"help": "Specify an MCD profile name. Uses default otherwise."
				},
				"input_file": {
					"required": true,
					"help": "Relative or absolute path to csv file."
				}
			}
		}

	},
	"tables": {
		"link_tables_via_descriptions.py": {
			"description": "\n\nAdds hyperlink in assets' description to link tables/views that match based on name within different schemas",
			"arguments": {
				"profile": {
					"default": "default",
					"required": false,
					"help": "Specify an MCD profile name. Uses default otherwise."
				},
				"a_source": {
					"required": true,
					"help": "Database & Schema in the format db:schema"
				},
				"b_source": {
					"required": true,
					"help": "Database & Schema in the format db:schema"
				}
			}
		}
	}
}
